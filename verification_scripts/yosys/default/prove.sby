[tasks]
prove
[options]

prove: mode prove

timeout 10

[engines]
prove: abc pdr
#[autotune]
#parallel 6
#wait 10%+20

[script]

log -stdout "===recheck_prove"
# verilog_defines -DSCENARIO_8_BIT=1 # does not work.

read -formal formal.sv
read -sv2012 ./rtl/counter.sv
read -formal ./properties/fv_constraints.sv
read -formal defs.svh ./properties/fv_scenarios.sv
read -formal defs.svh ./properties/fv_counter.sv
read -formal defs.svh ./properties/fv_top_aip.sv

# Run task1 with a different parameter for WIDTH
prove: hierarchy -chparam WIDTH 4 -top customer_counter

# Prepare the top with the command: prep -top <top module>
prep -top customer_counter

# Make sure non of the assertions are optimized away
setattr -set keep 1 t:$check t:$assert




[files]
# The 'files' section lists which files must be copied to the SBY task workspace.
# The files are copied to the workspace before the script is executed.
# Syntax: [<TARGET>] <SOURCE>
# If target is omitted, the source file is copied to the src directory of the workspace 
# with the original file name, i.e., name is maintaned while directory hierarchy is removed.
# This can be problematic if the source file uses relative paths, e.g., in `include statements.
./rtl/counter.sv  ../../../rtl/counter.sv
./properties/fv_constraints.sv  ../../../properties/fv_constraints.sv
./properties/fv_scenarios.sv    ../../../properties/fv_scenarios.sv
./properties/fv_counter.sv      ../../../properties/fv_counter.sv
./properties/fv_top_aip.sv      ../../../properties/fv_top_aip.sv


# The following section creates a file 'formal.sv' in the src dir of the workspace with the verbatim content.
# This construct is required to enforce a consistent reset signal in the design. 
# The module can be used as is, only the bind statement must be adapted to the design.
# If the design is not using a reset signal, this section (and all references in the script section) must be removed.
[file formal.sv]
module formal_setup(
    input logic clk,
    input logic rst
);

    reg [3:0] rst_counter = 2;
    always @(posedge clk)
        if (rst_counter)
            rst_counter -= 1;

    wire internal_rst = rst_counter > 0;

    always @* begin
        setup_rst_l: assume (internal_rst == rst);
    end
endmodule

bind customer_counter formal_setup formal_setup_inst (
    .clk(clk),
    .rst(rst)
);


[file defs.svh]
`define DEFAULT_UPPERBOUND 1
`define YOSYS_SBY 1